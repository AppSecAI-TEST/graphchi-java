package com.twitter.pers.util;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;

/**
 * Very simple service that reads a file generated by namedatacreator.cpp:
 * each name is of fixed length and is at file in position vertex-id * length.
 * @author Aapo Kyrola, akyrola@twitter.com
 */
public class VertexNameService extends UnicastRemoteObject implements  RemoteVertexNameService  {

    private File dataFile;
    private long nameLength;

    public VertexNameService(File dataFile, long nameLength) throws RemoteException {
        this.dataFile = dataFile;
        this.nameLength = nameLength;
        if (!dataFile.exists()) throw new RuntimeException("File " + dataFile.getAbsolutePath() + " not found!");
    }

    private String getName(int vertexId) throws IOException {
        RandomAccessFile raf = new RandomAccessFile(dataFile, "r");
        long off = ((long)vertexId) * nameLength;
        if (off >= dataFile.length()) {
            return "";
        }
        raf.seek(off);

        byte[] template = new byte[(int) this.nameLength];
        raf.read(template);

        return new String(template).trim();
    }

    @Override
    public ArrayList<String> namify(ArrayList<Integer> ids) throws RemoteException {
        try {
            ArrayList<String> result = new ArrayList<String>(ids.size());

            for(Integer vertexId : ids) {
                result.add(getName(vertexId));
            }
            return result;
        } catch (IOException ioe) {
            throw new RuntimeException(ioe);
        }
    }

    public static void main(String[] args) throws Exception {
        String dataFile = args[0];
        int nameLength = Integer.parseInt(args[1]);
        String bindAddress = args[2];

        VertexNameService vns = new VertexNameService(new File(dataFile), nameLength);

        for(int i=0; i<10;i++) {
            System.out.println(i + " ===> " + vns.getName(i));
        }

        Naming.bind(bindAddress, vns);
        System.out.println("Bound to: " + bindAddress);
    }
}
